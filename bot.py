from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import re
from datetime import datetime
import os
import logging
import json
import gspread
from google.oauth2.service_account import Credentials
from telegram.error import NetworkError, TelegramError

# ----------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# ----------------------------
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
def connect_gsheets():
    try:
        service_account_json = os.getenv("SERVICE_ACCOUNT_JSON")
        if not service_account_json:
            raise ValueError("‚ùå SERVICE_ACCOUNT_JSON –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

        service_account_info = json.loads(service_account_json)
        creds = Credentials.from_service_account_info(service_account_info)
        client = gspread.authorize(creds)
        sheet = client.open("questions").sheet1  # –∏–ª–∏ —è–≤–Ω–æ —É–∫–∞–∂–∏ worksheet("–õ–∏—Å—Ç1")
        return sheet
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets")
        raise

# --------------------------
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ (RU –∏–ª–∏ ET)
def detect_language(text: str) -> str:
    if re.search(r"[–∞-—è–ê-–Ø—ë–Å]", text):
        return "ru"
    return "et"

# --------------------------
# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def send_welcome(update: Update, lang: str):
    if lang == "ru":
        welcome_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π –¢–æ–Ω–¥–∏—Ä–∞–±–∞.\n\n"
            "–ú–µ–Ω—è –∑–æ–≤—É—Ç –¢–æ–Ω–¥–∏–∫ üòä\n"
            "–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–±—Ä–∞—Ç—å –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥–∞ —à–∫–æ–ª—ã –º–æ–≥–ª–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã "
            "–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –∫–∞–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã –≤—ã–∑—ã–≤–∞—é—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏.\n\n"
            "‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —á—Ç–æ–±—ã –≤–æ–ø—Ä–æ—Å –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑—É, –æ–Ω –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞ (?)"
        )
    else:
        welcome_text = (
            "üëã Tere! Ma olen Tondiraba √µpetajate bot.\n\n"
            "Minu nimi on Tondik üòä\n"
            "Minu √ºlesanne on koguda teie k√ºsimusi, et kooli meeskond saaks ette valmistada vastused "
            "ja anal√º√ºsida, millised teemad on √µpetajatele ebaselged.\n\n"
            "‚ö†Ô∏è Palun pange t√§hele: et k√ºsimus salvestataks, peab see l√µppema k√ºsim√§rgiga (?)"
        )

    await update.message.reply_text(welcome_text)

# ----------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    lang = detect_language(text)

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if text.lower() in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "tere", "tsau", "hei"]:
        return await send_welcome(update, lang)

    # –ù–∞ –≤–æ–ø—Ä–æ—Å "–¥–æ–∫–æ–ª–µ?" –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    if text.lower() == "–¥–æ–∫–æ–ª–µ?":
        await update.message.reply_photo(
            photo="https://i.pinimg.com/736x/43/e5/b1/43e5b1b417419ca8a9ea0194cd5a62e2.jpg",
            caption="üòÖ"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ Google Sheets
    if text.endswith("?"):
        try:
            sheet = connect_gsheets()
            first_name = update.message.from_user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            sheet.append_row([
                datetime.now().strftime("%Y-%m-%d %H:%M"),
                str(update.message.from_user.id),
                first_name,
                text
            ])
            reply = "‚úÖ –í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!" if lang == "ru" else "‚úÖ K√ºsimus on salvestatud!"
        except Exception:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets")
            reply = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞." if lang == "ru" else "‚ùå K√ºsimuse salvestamisel tekkis viga."
    else:
        reply = (
            "‚õî –°–µ–π—á–∞—Å –≤ –º–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Ö–æ–¥–∏—Ç —Å–±–æ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç —É—á–∏—Ç–µ–ª–µ–π.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –≤–æ–ø—Ä–æ—Å–∞ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –∑–Ω–∞–∫–æ–º –≤–æ–ø—Ä–æ—Å–∞ (?)."
            if lang == "ru"
            else
            "‚õî Praegu on minu √ºlesanne koguda √µpetajatelt k√ºsimusi.\n"
            "Palun s√µnastage oma s√µnum k√ºsimusena ja l√µpetage see k√ºsim√§rgiga (?)."
        )

    await update.message.reply_text(reply)

# ----------------------------
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
async def get_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        sheet = connect_gsheets()
        rows = sheet.get_all_values()

        if len(rows) <= 1:
            await update.message.reply_text("‚ùå –í–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        text = "=== –í–æ–ø—Ä–æ—Å—ã ===\n\n"
        for row in rows[1:]:  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            text += f"[{row[0]}] {row[2]} ({row[1]}): {row[3]}\n"

        # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤, —Ä–µ–∂–µ–º –Ω–∞ –∫—É—Å–∫–∏
        for i in range(0, len(text), 4000):
            await update.message.reply_text(text[i:i+4000])

    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ Google Sheets.")

# ----------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def handle_error(update, context):
    logging.error(f"Update {update} –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É: {context.error}")
    if isinstance(context.error, NetworkError):
        logging.warning("‚ö†Ô∏è NetworkError: –≤–æ–∑–º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–±–æ–π, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
    elif isinstance(context.error, TelegramError):
        logging.warning("‚ö†Ô∏è TelegramError: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ API")
    else:
        logging.warning(f"‚ö†Ô∏è –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: {context.error}")

# ----------------------------
def main():
    TOKEN = os.environ.get("TELEGRAM_TOKEN")
    if not TOKEN:
        raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", lambda u, c: send_welcome(u, detect_language(u.message.text or ""))))
    app.add_handler(CommandHandler("getquestions", get_questions))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(handle_error)

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω... (polling)")
    app.run_polling()

# ----------------------------
if __name__ == "__main__":
    main()

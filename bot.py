from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import re
from datetime import datetime
import os
import git  # –¥–ª—è –ø—É—à–∞ –≤ GitHub

# ----------------------------
# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
QUESTIONS_FILE = "questions.txt"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º
if not os.path.exists(QUESTIONS_FILE):
    with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
        f.write("=== –í–æ–ø—Ä–æ—Å—ã —É—á–∏—Ç–µ–ª–µ–π ===\n\n")

# ----------------------------
# –ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (Railway –æ–±—ã—á–Ω–æ /app)
REPO_PATH = "/app"
# –°—Å—ã–ª–∫–∞ –Ω–∞ GitHub —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
GITHUB_URL = f"https://{os.getenv('GITHUB_TOKEN')}@github.com/<USERNAME>/<REPO>.git"

# ----------------------------
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ (RU –∏–ª–∏ ET)
def detect_language(text: str) -> str:
    if re.search(r"[–∞-—è–ê-–Ø—ë–Å]", text):
        return "ru"
    return "et"

# ----------------------------
# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text or ""
    lang = detect_language(text)

    if lang == "ru":
        welcome_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π –¢–æ–Ω–¥–∏—Ä–∞–±–∞.\n\n"
            "–ú–µ–Ω—è –∑–æ–≤—É—Ç –¢–æ–Ω–¥–∏–∫ üòä\n"
            "–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–±—Ä–∞—Ç—å –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥–∞ —à–∫–æ–ª—ã –º–æ–≥–ª–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã "
            "–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –∫–∞–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã –≤—ã–∑—ã–≤–∞—é—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏.\n\n"
            "‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —á—Ç–æ–±—ã –≤–æ–ø—Ä–æ—Å –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑—É, –æ–Ω –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞ (?)"
        )
    else:
        welcome_text = (
            "üëã Tere! Ma olen Tondiraba √µpetajate bot.\n\n"
            "Minu nimi on Tondik üòä\n"
            "Minu √ºlesanne on koguda teie k√ºsimusi, et kooli meeskond saaks ette valmistada vastused "
            "ja anal√º√ºsida, millised teemad on √µpetajatele ebaselged.\n\n"
            "‚ö†Ô∏è Palun pange t√§hele: et k√ºsimus salvestataks, peab see l√µppema k√ºsim√§rgiga (?)"
        )

    await update.message.reply_text(welcome_text)

# ----------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    lang = detect_language(text)

    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º welcome
    if text.lower() in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "tere", "tsau", "hei"]:
        return await start(update, context)

    if text.endswith("?"):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –¥–∞—Ç–æ–π/–≤—Ä–µ–º–µ–Ω–µ–º –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with open(QUESTIONS_FILE, "a", encoding="utf-8") as f:
            f.write(
                f"[{datetime.now().strftime('%Y-%m-%d %H:%M')}] "
                f"UserID {update.message.from_user.id} ({update.message.from_user.first_name}): {text}\n"
            )

        # --------- –ü—É—à–∏–º –≤ GitHub ---------
        try:
            repo = git.Repo(REPO_PATH)
            repo.git.add(QUESTIONS_FILE)
            repo.index.commit(f"New question at {datetime.now().strftime('%Y-%m-%d %H:%M')}")
            origin = repo.remote(name='origin')
            origin.push()
            print("‚úÖ Questions.txt pushed to GitHub")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É—à–µ –≤ GitHub: {e}")
        # ----------------------------------

        if lang == "ru":
            reply = "‚úÖ –í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ GitHub!"
        else:
            reply = "‚úÖ K√ºsimus salvestatud ja saadetud GitHub'i!"
    else:
        if lang == "ru":
            reply = (
                "‚õî –°–µ–π—á–∞—Å –≤ –º–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Ö–æ–¥–∏—Ç —Å–±–æ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç —É—á–∏—Ç–µ–ª–µ–π.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –≤–æ–ø—Ä–æ—Å–∞ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –∑–Ω–∞–∫–æ–º –≤–æ–ø—Ä–æ—Å–∞ (?)."
            )
        else:
            reply = (
                "‚õî Praegu on minu √ºlesanne koguda √µpetajatelt k√ºsimusi.\n"
                "Palun s√µnastage oma s√µnum k√ºsimusena ja l√µpetage see k√ºsim√§rgiga (?)."
            )

    await update.message.reply_text(reply)

# ----------------------------
def main():
    TOKEN = os.getenv("TELEGRAM_TOKEN")  # <-- –±–µ—Ä—ë–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not TOKEN:
        raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω... (—Ä–µ–∂–∏–º —Å–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤)")
    app.run_polling()

# ----------------------------
if __name__ == "__main__":
    main()
